package tools.writers;

import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import tools.grammar.Grammar;

public class VisitorBaseClassWriter extends AstNodeWriter {

    protected static File visitorDirectory = new File("src/visitor");

    public VisitorBaseClassWriter(Grammar grammar) {
        super(grammar);
    }

    public static void prepareVisitorDirectory() throws Exception {
        if (VisitorBaseClassWriter.visitorDirectory.exists()) {
            for (File file : VisitorBaseClassWriter.visitorDirectory.listFiles()) {
                if (file.isFile()) {
                    file.delete();
                }
            }
        }

        Files.createDirectories(VisitorBaseClassWriter.visitorDirectory.toPath());
    }

    @Override
    public void write() throws Exception {
        File visitorFile = new File(VisitorBaseClassWriter.visitorDirectory, "ASTVisitor.java");

        try (FileWriter writer = new FileWriter(visitorFile)) {
            writer.write(this.formattedLine("package visitor;", 0, 2));

            writer.write(this.formattedLine("import ast.*;", 0, 2));

            writer.write(this.formattedLine(getAutoGeneratedComment(), 0, 1));

            writer.write(this.formattedLine("public abstract class ASTVisitor {", 0, 2));

            writer.write(this.formattedLine("public void visitChildren(AST node) throws Exception {", 1, 1));
            writer.write(this.formattedLine("for (AST child : node.getChildren()) {", 2, 1));
            writer.write(this.formattedLine("child.accept(this);", 3, 1));
            writer.write(this.formattedLine("}", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            for (String node : this.getAllNodeNames()) {
                writer.write(this.formattedLine(
                        String.format("public abstract AST visit%s(AST node) throws Exception;", node), 1, 2));
            }

            writer.write(this.formattedLine("}", 0, 2));
        }
    }

    protected List<String> getAllNodeNames() {
        return Stream.concat(this.grammar.getAstsWithoutSymbols().stream(),
                this.grammar.getAstsWithSymbols().stream()).map(super::getClassNameFromGrammar)
                .collect(Collectors.toList());
    }
}
