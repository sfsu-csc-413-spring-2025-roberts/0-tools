package tools.writers;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.List;

import tools.grammar.Grammar;

public class AstNodeWriter extends AutoGeneratedFileWriter {

    private static File nodeDirectory = new File("src/ast/nodes");

    public AstNodeWriter(Grammar grammar) {
        super(grammar);
    }

    public static void prepareNodeDirectory() throws IOException {
        if (AstNodeWriter.nodeDirectory.exists()) {
            for (File file : AstNodeWriter.nodeDirectory.listFiles()) {
                if (file.isFile()) {
                    file.delete();
                }
            }
        }

        Files.createDirectories(AstNodeWriter.nodeDirectory.toPath());
    }

    @Override
    public void write() throws Exception {

        for (String astNode : this.getNodes()) {
            String className = this.getClassNameFromGrammar(astNode);
            String fileName = String.format("%s.java", className);

            File nodeFile = new File(AstNodeWriter.nodeDirectory, fileName);

            try (FileWriter writer = new FileWriter(nodeFile)) {
                writer.write(this.formattedLine("package ast.nodes;", 0, 2));

                writer.write(this.formattedLine("import ast.AST;", 0, 1));
                writer.write(this.formattedLine("import visitor.ASTVisitor;", 0, 1));

                this.insertImports(writer, className);

                writer.write(this.formattedLine(getAutoGeneratedComment(), 0, 1));

                writer.write(this.getClassDeclarationLine(className));

                this.insertMembers(writer, className);

                this.insertMethods(writer, className);

                writer.write(this.formattedLine("", 0, 1));
                writer.write(this.formattedLine("@Override", 1, 1));
                writer.write(this.formattedLine("public AST accept(ASTVisitor visitor) throws Exception {", 1, 1));
                writer.write(this.formattedLine(String.format("return visitor.visit%s(this);", className), 2, 1));
                writer.write(this.formattedLine("}", 1, 1));

                writer.write(this.formattedLine("}", 0, 1));
            }
        }
    }

    protected String getClassDeclarationLine(String className) {
        return this.formattedLine(String.format("public class %s extends AST {", className), 0, 1);
    }

    protected String getClassNameFromGrammar(String astNode) {
        String normalizedClassName = String.join("",
                Arrays.asList(astNode.split("_")).stream()
                        .map(s -> String.format("%s%s", s.substring(0, 1).toUpperCase(), s.substring(1).toLowerCase()))
                        .toList());

        return String.format("%sTree", normalizedClassName);
    }

    protected List<String> getNodes() {
        return this.grammar.getAstsWithoutSymbols();
    }

    protected void insertImports(FileWriter writer, String className) throws Exception {
        writer.write(this.formattedLine("", 0, 1));
    }

    protected void insertMembers(FileWriter writer, String className) throws Exception {
        // No members to insert; template for subclasses to override
    }

    protected void insertMethods(FileWriter writer, String className) throws Exception {
        // No methods to insert; template for subclasses to override
    }
}
