package tools.writers;

import java.io.File;
import java.io.FileWriter;

import tools.grammar.Grammar;

public class PrintVisitorWriter extends AstNodeWriter {

    public PrintVisitorWriter(Grammar grammar) {
        super(grammar);
    }

    @Override
    public void write() throws Exception {
        File file = new File(VisitorBaseClassWriter.visitorDirectory, "PrintVisitor.java");

        if (file.exists()) {
            file.delete();
        }

        try (FileWriter writer = new FileWriter(file)) {
            writer.write(this.formattedLine("package visitor;", 0, 2));

            writer.write(this.formattedLine("import ast.*;", 0, 2));

            writer.write(this.formattedLine(getAutoGeneratedComment(), 0, 1));

            writer.write(this.formattedLine("public class PrintVisitor extends ASTVisitor {", 0, 2));

            writer.write(this.formattedLine("private final int INDENT_BY = 2;", 1, 1));
            writer.write(this.formattedLine("private int indentation = INDENT_BY;", 1, 2));

            writer.write(
                    this.formattedLine("private void print(String description, AST node) throws Exception {", 1, 1));
            writer.write(this.formattedLine("String nodeNumber = String.format(\"%3d\", node.getNodeNumber());", 2, 2));

            writer.write(this.formattedLine("System.out.println(String.format(\"%-3s %-35.35s\",", 2, 1));
            writer.write(this.formattedLine("nodeNumber,", 4, 1));
            writer.write(this.formattedLine("String.format(\"%\" + this.indentation + \"s%s\", \"\", description)));",
                    4, 2));

            writer.write(this.formattedLine("this.indentation += INDENT_BY;", 2, 1));
            writer.write(this.formattedLine("this.visitChildren(node);", 2, 1));
            writer.write(this.formattedLine("this.indentation -= INDENT_BY;", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            for (String node : this.grammar.getAstsWithoutSymbols().stream().map(super::getClassNameFromGrammar)
                    .toList()) {
                writer.write(this.formattedLine("@Override", 1, 1));
                writer.write(this.formattedLine(
                        String.format("public AST visit%s(AST node) throws Exception {", node), 1, 1));
                writer.write(this.formattedLine(String.format("this.print(\"%s\", node);", node), 2, 1));
                writer.write(this.formattedLine("return null;", 2, 1));
                writer.write(this.formattedLine("}", 1, 2));
            }

            for (String node : this.grammar.getAstsWithSymbols().stream().map(super::getClassNameFromGrammar)
                    .toList()) {
                writer.write(this.formattedLine("@Override", 1, 1));
                writer.write(this.formattedLine(
                        String.format("public AST visit%s(AST node) throws Exception {", node), 1, 1));
                writer.write(this.formattedLine(String.format(
                        "this.print(String.format(\"%s: %%s\", ((TokenTree) node).getToken().getLexeme()), node);",
                        node), 2, 1));
                writer.write(this.formattedLine("return null;", 2, 1));
                writer.write(this.formattedLine("}", 1, 2));
            }

            writer.write(this.formattedLine("}", 0, 2));
        }
    }
}
