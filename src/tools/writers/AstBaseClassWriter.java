package tools.writers;

import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Path;

import tools.grammar.Grammar;

public class AstBaseClassWriter extends AutoGeneratedFileWriter {

    private File ast;
    private File symbolTree;

    public AstBaseClassWriter(Grammar grammar) {
        super(grammar);

        this.ast = new File("src/ast/AST.java");
        this.symbolTree = new File("src/ast/SymbolTree.java");
    }

    @Override
    public void write() throws Exception {
        Files.createDirectories(Path.of(this.ast.getParent()));
        if (this.ast.exists()) {
            this.ast.delete();
        }
        if (this.symbolTree.exists()) {
            this.symbolTree.delete();
        }

        try (FileWriter writer = new FileWriter(this.ast)) {
            writer.write(this.formattedLine("package ast;", 0, 2));

            writer.write(this.formattedLine("import java.util.List;", 0, 1));
            writer.write(this.formattedLine("import java.util.ArrayList;", 0, 2));

            writer.write(this.formattedLine("import visitor.ASTVisitor;", 0, 2));

            writer.write(this.formattedLine(getAutoGeneratedComment(), 0, 1));

            writer.write(this.formattedLine("public abstract class AST {", 0, 2));

            writer.write(this.formattedLine("public static int NodeCounter = 0;", 1, 2));

            writer.write(this.formattedLine("private int nodeNumber;", 1, 1));
            writer.write(this.formattedLine("private List<AST> children;", 1, 1));
            writer.write(this.formattedLine("private AST decoration;", 1, 1));
            writer.write(this.formattedLine("private String label;", 1, 1));
            writer.write(this.formattedLine("private int frameOffset;", 1, 2));

            writer.write(this.formattedLine("public AST() {", 1, 1));
            writer.write(this.formattedLine("this.nodeNumber = AST.NodeCounter++;", 2, 1));
            writer.write(this.formattedLine("this.children = new ArrayList<>();", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            writer.write(this.formattedLine("public int getNodeNumber() {", 1, 1));
            writer.write(this.formattedLine("return this.nodeNumber;", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            writer.write(this.formattedLine("public AST addChild(AST child) {", 1, 1));
            writer.write(this.formattedLine("this.children.add(child);", 2, 2));
            writer.write(this.formattedLine("return this;", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            writer.write(this.formattedLine("public AST getChild(int index) {", 1, 1));
            writer.write(this.formattedLine("if (index < 0 || index >= this.children.size()) {", 2, 1));
            writer.write(this.formattedLine("return null;", 3, 1));
            writer.write(this.formattedLine("}", 2, 2));
            writer.write(this.formattedLine("return this.children.get(index);", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            writer.write(this.formattedLine("public int getChildCount() {", 1, 1));
            writer.write(this.formattedLine("return this.children.size();", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            writer.write(this.formattedLine("public List<AST> getChildren() {", 1, 1));
            writer.write(this.formattedLine("return List.copyOf(this.children);", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            writer.write(this.formattedLine("public AST getDecoration() {", 1, 1));
            writer.write(this.formattedLine("return this.decoration;", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            writer.write(this.formattedLine("public void setDecoration(AST decoration) {", 1, 1));
            writer.write(this.formattedLine("this.decoration = decoration;", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            writer.write(this.formattedLine("public String getLabel() {", 1, 1));
            writer.write(this.formattedLine("return this.label;", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            writer.write(this.formattedLine("public void setLabel(String label) {", 1, 1));
            writer.write(this.formattedLine("this.label = label;", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            writer.write(this.formattedLine("public int getFrameOffset() {", 1, 1));
            writer.write(this.formattedLine("return this.frameOffset;", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            writer.write(this.formattedLine("public void setFrameOffset(int frameOffset) {", 1, 1));
            writer.write(this.formattedLine("this.frameOffset = frameOffset;", 2, 1));
            writer.write(this.formattedLine("}", 1, 2));

            writer.write(this.formattedLine("public abstract AST accept(ASTVisitor visitor) throws Exception;", 1, 2));

            writer.write(this.formattedLine("}", 0, 1));
            writer.flush();
            writer.close();
        }

        try (FileWriter writer = new FileWriter(this.symbolTree)) {
            writer.write(this.formattedLine("package ast;", 0, 2));

            writer.write(this.formattedLine("import lexer.daos.Symbol;", 0, 2));

            writer.write(this.formattedLine(getAutoGeneratedComment(), 0, 1));

            writer.write(this.formattedLine("public interface SymbolTree {", 0, 1));
            writer.write(this.formattedLine("public Symbol getSymbol();", 1, 1));
            writer.write(this.formattedLine("}", 0, 2));

            writer.flush();
            writer.close();
        }
    }
}
