package tests.helpers;

import java.util.List;
import java.util.StringTokenizer;

import ${lexerPackageName}.ILexer;
import ${lexerPackageName}.${daosPackageName}.Token;
import ${astPackageName}.*;
import ${astPackageName}.${treePackageName}.*;

public class PseudoProgram {

    public static ILexer lexerFromPseudoProgram(String program) throws Exception {
        StringTokenizer tokenizer = new StringTokenizer(program);

        TestLexer lexer = new TestLexer();

        while (tokenizer.hasMoreTokens()) {
            String tokenString = tokenizer.nextToken();
            Token token = PseudoProgramTokens.getTestToken(tokenString);

            if (token == null) {
                // This should only happen if I have created an invalid test case
                throw new Exception(String.format("Unrecognized token: %s", tokenString));
            }

            lexer.addToken(token);
        }

        return lexer;
    }

    public static ILexer lexerForRelationalOperator(String relOp) throws Exception {
        return PseudoProgram.lexerFromPseudoProgram(
                String.format(
                        String.join(
                                System.lineSeparator(),
                                List.of(
                                        "program {",
                                        "  return <int> %s <int>",
                                        "}")),
                        relOp));
    }

    public static List<$astClassName> expectedAstForRelationalOperator(String relOp) {
        return List.of(
                new ProgramTree(),
                new BlockTree(),
                new ReturnTree(),
                new RelOpTree(PseudoProgramTokens.getTestToken(relOp)),
                new IntLitTree(PseudoProgramTokens.getTestToken("<int>")),
                new IntLitTree(PseudoProgramTokens.getTestToken("<int>")));
    }

    public static ILexer lexerForMathematicalOperator(String mathOp) throws Exception {
        return PseudoProgram.lexerFromPseudoProgram(
                String.format(
                        String.join(
                                System.lineSeparator(),
                                List.of(
                                        "program { int <id>",
                                        "  <id> = <int> %s <int>",
                                        "}")),
                        mathOp));
    }

    public static List<$astClassName> expectedAstForMathematicalOperator(AST opTree) {
        return List.of(
                new ProgramTree(),
                new BlockTree(),
                new DeclarationTree(),
                new IntTypeTree(),
                new IdentifierTree(PseudoProgramTokens.getTestToken("<id>")),
                new AssignmentTree(),
                new IdentifierTree(PseudoProgramTokens.getTestToken("<id>")),
                opTree,
                new IntLitTree(PseudoProgramTokens.getTestToken("<int>")),
                new IntLitTree(PseudoProgramTokens.getTestToken("<int>")));
    }

    public static ILexer lexerForType(String typeString) throws Exception {
        return PseudoProgram.lexerFromPseudoProgram(
                String.format(
                        String.join(
                                System.lineSeparator(),
                                List.of(
                                        "program { %s <id>",
                                        "  <id> = <%s>",
                                        "}")),
                        typeString, typeString));
    }

    public static List<$astClassName> expectedAstForType(String typeString) {
        return List.of(
                new ProgramTree(),
                new BlockTree(),
                new DeclarationTree(),
                PseudoProgramAsts.get(typeString),
                new IdentifierTree(PseudoProgramTokens.getTestToken("<id>")),
                new AssignmentTree(),
                new IdentifierTree(PseudoProgramTokens.getTestToken("<id>")),
                PseudoProgramAsts.get(String.format("<%s>", typeString)));
    }
}
